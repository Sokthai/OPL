#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 255 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1069 0 30 3 12 #"#lang racket"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";; read Section 1.1 of SICP"
0 0 26 29 1 #"\n"
0 0 18 3 74
(
 #";; https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_s"
 #"ec_1.1"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";; read Section 1.2 of SICP"
0 0 26 29 1 #"\n"
0 0 18 3 74
(
 #";; https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_s"
 #"ec_1.2"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(
 #";; write a recursive procedure for adding the first n natural number"
 #"s"
) 0 0 26 29 1 #"\n"
0 0 18 3 61
#";; which will result in a recursive process being carried out"
0 0 26 29 1 #"\n"
0 0 18 3 30 #";; e.g. (sum-recursive 0) is 0"
0 0 26 29 1 #"\n"
0 0 18 3 30 #";;      (sum-recursive 1) is 1"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 1 18 65 1 #"\t"
0 0 18 3 35 #"(sum-recursive 2) is 3 [it's 2 + 1]"
0 0 26 29 1 #"\n"
0 0 18 3 47 #";;      (sum-recursive 3) is 6 [it's 3 + 2 + 1]"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"sum-recursive"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 13 #"sum-recursive"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #")) "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 47 #";; what is the TIME complexity of this process?"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";; for a refresher on Big-O Notation:"
0 0 26 29 1 #"\n"
0 0 18 3 68
#";; https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; uncomment the line that has the correct answer"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; (define sum-recursive-time-complexity \"O(1)\")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 29 #"sum-recursive-time-complexity"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"O(N)\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 50 #";; (define sum-recursive-time-complexity \"O(N^2)\")"
0 0 26 29 1 #"\n"
0 0 18 3 54 #";; (define sum-recursive-time-complexity \"O(N log N)\")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; what is the SPACE complexity of this process?"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; uncomment the line that has the correct answer"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; (define sum-recursive-space-complexity \"O(1)\")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 30 #"sum-recursive-space-complexity"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"O(N)\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 51 #";; (define sum-recursive-space-complexity \"O(N^2)\")"
0 0 26 29 1 #"\n"
0 0 18 3 55 #";; (define sum-recursive-space-complexity \"O(N log N)\")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(
 #";; write a recursive procedure for adding the first n natural number"
 #"s"
) 0 0 26 29 1 #"\n"
0 0 18 3 61
#";; which will result in a ITERATIVE process being carried out"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"sum-iterative"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"sum-iter"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"sum-iter"
0 0 26 3 1 #" "
0 0 14 3 3 #"sum"
0 0 26 3 1 #" "
0 0 14 3 7 #"counter"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 7 #"counter"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 14 3 3 #"sum"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 8 #"sum-iter"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 3 #"sum"
0 0 26 3 1 #" "
0 0 14 3 7 #"counter"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 7 #"counter"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 5 #")    "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"  ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 47 #";; what is the TIME complexity of this process?"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; uncomment the line that has the correct answer"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; (define sum-iterative-time-complexity \"O(1)\")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 29 #"sum-iterative-time-complexity"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"O(N)\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 50 #";; (define sum-iterative-time-complexity \"O(N^2)\")"
0 0 26 29 1 #"\n"
0 0 18 3 54 #";; (define sum-iterative-time-complexity \"O(N log N)\")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; what is the SPACE complexity of this process?"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; uncomment the line that has the correct answer"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 30 #"sum-iterative-space-complexity"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"O(1)\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; (define sum-iterative-space-complexity \"O(N)\")"
0 0 26 29 1 #"\n"
0 0 18 3 51 #";; (define sum-iterative-space-complexity \"O(N^2)\")"
0 0 26 29 1 #"\n"
0 0 18 3 55 #";; (define sum-iterative-space-complexity \"O(N log N)\")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 76
(
 #";; write a recursive procedure for sum of squares of first n natural"
 #" numbers"
) 0 0 26 29 1 #"\n"
0 0 18 3 36 #";; that produces a RECURSIVE process"
0 0 26 29 1 #"\n"
0 0 18 3 39 #";; e.g., (sum-squares-recursive 0) is 0"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 1 18 65 1 #"\t"
0 0 18 3 31 #" (sum-squares-recursive 1) is 1"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 1 18 65 1 #"\t"
0 0 18 3 43 #" (sum-squares-recursive 2) is 5 (2^2 + 1^2)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 21 #"sum-squares-recursive"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 21 #"sum-squares-recursive"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 4 #"))) "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";; write a recursive procedure for the same"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";; that produces an ITERATIVE process"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 21 #"sum-squares-iterative"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 15 #"sum-square-iter"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"sum-square-iter"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 15 #"sum-square-iter"
0 0 26 3 1 #"("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 72
(
 #";; write a recursive procedure for sum of squares of first n odd num"
 #"bers"
) 0 0 26 29 1 #"\n"
0 0 18 3 20 #";; (starting with 1)"
0 0 26 29 1 #"\n"
0 0 18 3 36 #";; that produces a RECURSIVE process"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";; e.g., (sum-alt-squares-recursive 0) is 0"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 1 18 65 1 #"\t"
0 0 18 3 41 #" (sum-alt-squares-recursive 1) is 1 (1^2)"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 1 18 65 1 #"\t"
0 0 18 3 48 #" (sum-alt-squares-recursive 2) is 10 (3^2 + 1^2)"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 1 18 65 1 #"\t"
0 0 18 3 54 #" (sum-alt-squares-recursive 3) is 35 (5^2 + 3^2 + 1^2)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 25 #"sum-alt-squares-recursive"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 25 #"sum-alt-squares-recursive"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #")) "
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 1 #"*"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 7 #"))))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";; write a recursive procedure for the same"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";; that produces an ITERATIVE process"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 25 #"sum-alt-squares-iterative"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 20 #"sum-alt-squares-iter"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 20 #"sum-alt-squares-iter"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"q"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 20 #"sum-alt-squares-iter"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"q"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 3 #"))("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"q"
0 0 26 3 1 #" "
0 0 14 3 1 #"q"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 36 #";; following series converges to 2/3"
0 0 26 29 1 #"\n"
0 0 18 3 62
#";; (notice alternating addition and subtraction of the terms):"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 29 #";;  1     1     1     1     1"
0 0 26 29 1 #"\n"
0 0 18 3 36 #";; --- - --- + --- - --- + ---  etc."
0 0 26 29 1 #"\n"
0 0 18 3 30 #";;  1     2     4     8     16"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 80
(
 #";; implement as a recursive process, where the argument is the numbe"
 #"r of terms  "
) 0 0 26 29 1 #"\n"
0 0 18 3 8 #";; e.g. "
0 0 26 29 1 #"\n"
0 0 18 3 29 #";; (two-thirds-series 0) is 1"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; (two-thirds-series 1) is 1/2"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; (two-thirds-series 2) is 3/4"
0 0 26 29 1 #"\n"
0 0 18 3 59
#";; HINTS: even? and odd? are predicates; (expt 2 3) is 2^3."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"two-thirds-series-r"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   [("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   [("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 19 #"two-thirds-series-r"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 19 #"two-thirds-series-r"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 7 #")))])) "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";; write a recursive procedure for the same"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";; that produces an ITERATIVE process"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"two-thirds-series-i"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 22 #"two-thirds-series-iter"
0 0 26 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 3 #")) "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 22 #"two-thirds-series-iter"
0 0 26 3 1 #" "
0 0 14 3 1 #"m"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"m"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 22 #"two-thirds-series-iter"
0 0 26 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 22 #"two-thirds-series-iter"
0 0 26 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 6 #")))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; SICP exercise 1.11 (pp. 42)."
0 0 26 29 1 #"\n"
0 0 18 3 73
(
 #";; https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_t"
 #"hm_1."
) 0 0 18 3 1 #"1"
0 0 18 3 1 #"1"
0 0 26 29 1 #"\n"
0 0 18 3 68
#";; In this problem, you implement a recursive mathematical function."
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; Only do the recursive-process implementation. "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"square"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; SICP exercise 1.16 (pp. 46)."
0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #";; https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_t"
 #"hm_1.16"
) 0 0 26 29 1 #"\n"
0 0 18 3 67
#";; complete the fast-expt implementation using an iterative process"
0 0 26 29 1 #"\n"
0 0 18 3 67
#";; Note: This is hard! If you do this on your own, congratulations."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"fast-expt"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 3 #") ("
0 0 14 3 6 #"square"
0 0 26 3 2 #" ("
0 0 14 3 9 #"fast-expt"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 2 #" ("
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 2 #" ("
0 0 14 3 9 #"fast-expt"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";; Before answering the next two questions, read these sources:"
0 0 26 29 1 #"\n"
0 0 18 3 117
(
 #";;   https://docs.racket-lang.org/guide/Lists__Iteration__and_Recurs"
 #"ion.html#%28part._.Recursion_versus_.Iteration%29"
) 0 0 26 29 1 #"\n"
0 0 18 3 68
#";;   https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-34.html#%"
0 0 18 3 1 #"_"
0 0 18 3 8 #"idx_6088"
0 0 26 29 1 #"\n"
0 0 18 3 86
(
 #";;   https://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r5rs-htm"
 #"l.old/r5rs_22.html"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 34 #";; What does the \"recursive\" mean?"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 0 26 29 1 #"\n"
0 0 18 3 77
(
 #";; For each of the five statements, uncomment the definition line to"
 #" indicate"
) 0 0 26 29 1 #"\n"
0 0 18 3 42 #";; whether the statement is true or false."
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";; 1. Recursive means defined in terms of itself."
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"r1"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";; (define r1 #f)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #";; 2. Recursion in computing is analogous to induction in mathematic"
 #"s."
) 0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"r2"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";; (define r2 #f)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";; 3. If a process can be defined using an iterative recursion,"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";;    it's always better to do it that way."
0 0 26 29 1 #"\n"
0 0 18 3 17 #";; (define r3 #t)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"r3"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 41 #";; 4. Recursive and looping are synonyms."
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"r4"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";; (define r4 #f)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 41 #";; 5. Iteration and looping are synonyms."
0 0 26 29 1 #"\n"
0 0 18 3 17 #";; (define r5 #t)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"r5"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";; autograding note: this question is graded as all-or-nothing;"
0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #";; unless you have all of the answers correct, you will not receive "
 #"credit."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 35 #";; What does \"tail recursion\" mean?"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";; "
0 0 26 29 1 #"\n"
0 0 18 3 77
(
 #";; For each of the five statements, uncomment the definition line to"
 #" indicate"
) 0 0 26 29 1 #"\n"
0 0 18 3 42 #";; whether the statement is true or false."
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; 1. All recursive programs are tail-recursive."
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"tr1"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";; (define tr1 #f)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 86
(
 #";; 2. Tail recursion is a feature implemented by the Scheme interpre"
 #"ter (or compiler)."
) 0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"tr2"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";; (define tr2 #f)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 83
(
 #";; 3. In order to be considered a proper Scheme implementation, tail"
 #" recursion must"
) 0 0 26 29 1 #"\n"
0 0 18 3 18 #";;    be provided."
0 0 26 29 1 #"\n"
0 0 18 3 18 #";; (define tr3 #t)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"tr3"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 80
(
 #";; 4. If a program can be optimized with tail recursion, when carrie"
 #"d out, it is"
) 0 0 26 29 1 #"\n"
0 0 18 3 36 #";;    effectively performing a loop."
0 0 26 29 1 #"\n"
0 0 18 3 18 #";; (define tr4 #t)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"tr4"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #";; 5. In Racket, a non-tail-recursive procedure will exhaust memory "
 #"at"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(
 #";;    approximately the same depth as a C-style language would overf"
 #"low the stack."
) 0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"tr5"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";; (define tr5 #f)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";; autograding note: this question is graded as all-or-nothing;"
0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #";; unless you have all of the answers correct, you will not receive "
 #"credit."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0
