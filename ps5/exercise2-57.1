#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 255 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1331 0 30 3 12 #"#lang racket"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";; Exercise 2.57 on pp. 151."
0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #";; Extend the differentiator to handle sums and products of length 2"
 #"+."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 52 #";; You will need to change the following procedures:"
0 0 26 29 1 #"\n"
0 0 18 3 11 #";; make-sum"
0 0 26 29 1 #"\n"
0 0 18 3 9 #";; augend"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";; make-product"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";; multiplicand"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 26 3 1 #" "
0 0 14 3 2 #"v1"
0 0 26 3 1 #" "
0 0 14 3 2 #"v2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 26 3 1 #" "
0 0 14 3 2 #"v1"
0 0 26 3 3 #") ("
0 0 14 3 9 #"variable?"
0 0 26 3 1 #" "
0 0 14 3 2 #"v2"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 2 #"v1"
0 0 26 3 1 #" "
0 0 14 3 2 #"v2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"num"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"num"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 65
#";; per dotted-tail procedure notation, second and subsequent args"
0 0 26 29 1 #"\n"
0 0 18 3 53 #";; will get made into a list and provided in \"augend\""
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; the constructor should deal with three cases:"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";; [augend empty]    a  (make-sum 'x) is 'x"
0 0 26 29 1 #"\n"
0 0 18 3 51 #";; [augend length 1] d  (make-sum 'x 3) is '(+ x 3)"
0 0 26 29 1 #"\n"
0 0 18 3 45 #";;                   c  (make-sum 'x 0) is 'x"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";;                   b  (make-sum 1 2) is 3"
0 0 26 29 1 #"\n"
0 0 18 3 57 #";; [augend is 2+]    e  (make-sum 'x 'y 'z) is '(+ x y z)"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 26 29 1 #"\n"
0 0 18 3 66
#";; the code for the length 1 case is quite similar to the original"
0 0 26 29 1 #"\n"
0 0 18 3 55 #";; implementation; you should bring it in and modify it"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"lengths"
0 0 26 3 1 #" "
0 0 14 3 8 #"elements"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 8 #"elements"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 7 #"lengths"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"elements"
0 0 26 3 6 #"))))) "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-sum"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 2 #") "
0 0 18 3 31 #";augend is the list (after dot)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 2 #") "
0 0 14 3 2 #"a1"
0 0 26 3 2 #"] "
0 0 18 3 19 #";if null, return a1"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 7 #"lengths"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 16 3 4 #"cond"
0 0 26 3 1 #" "
0 0 18 3 14 #";length 1 case"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                            [("
0 0 14 3 8 #"=number?"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                            [("
0 0 14 3 8 #"=number?"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 14 3 2 #"a1"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                            [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 5 #"))])]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #">"
0 0 26 3 2 #" ("
0 0 14 3 7 #"lengths"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 16 3 4 #"cond"
0 0 26 3 1 #" "
0 0 18 3 14 #";length 1 case"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                            [("
0 0 14 3 8 #"=number?"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 3 #") ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                            [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"lengths"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 3 #")) "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 5 #")))) "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                            [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 1 #">"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 3 #")) "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 5 #")))) "
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                        ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 2 #"a1"
0 0 26 3 4 #")  ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 6 #"augend"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            )"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                           ] "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"addNumber"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 16 3 4 #"cond"
0 0 26 3 1 #" "
0 0 18 3 15 #";set up a list "
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                   [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #")))) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #"))))] "
0 0 18 3 7 #";both #"
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                   [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 9 #"variable?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #"))))] "
0 0 18 3 12 #";both symbol"
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                   [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 9 #"variable?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #"))))] "
0 0 18 3 24 #"; first #, second symbol"
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                   [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 8 #"))))])] "
0 0 18 3 23 #";first symbol, second #"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        [("
0 0 14 3 9 #"variable?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #")))) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #"))))] "
0 0 18 3 20 #";if second is symbol"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        [("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fcar"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #")) "
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fcar"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"fcdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #") )) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 32 #"                                "
0 0 18 3 4 #";lst"
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                ("
0 0 14 3 9 #"addNumber"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 6 #") )) ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 7 #"))))   "
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                )] "
0 0 18 3 7 #";both #"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fcar"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fcdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sum?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"addend"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 54 #";; you're allowed to have augend also be a constructor"
0 0 26 29 1 #"\n"
0 0 18 3 61
#";; you will need to test for the length of the augend, and do"
0 0 26 29 1 #"\n"
0 0 18 3 64
#";; something different the length=1 case and length is 2+ case. "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"augend"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"a"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 37 #";if length is 1 return it, otherwise "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 56 #";; like make-sum, this should work with 1, 2, or 3+ args"
0 0 26 29 1 #"\n"
0 0 18 3 46 #";; and perform reductions on 1 and 2 arg cases"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 26 3 1 #" "
0 0 14 3 2 #"m1"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 14 3 14 #"multiplicandxx"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 2 #"if"
0 0 18 3 2 #" ("
0 0 18 3 5 #"null?"
0 0 18 3 1 #" "
0 0 18 3 14 #"multiplicandxx"
0 0 18 3 2 #") "
0 0 18 3 2 #"m1"
0 0 18 3 1 #" "
0 0 18 3 5 #"\"ok\")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"2"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"product?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 1 #"*"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 42 #";; may also construct a product expression"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"multiplicand"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #"(("
0 0 14 3 9 #"variable?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #" ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #"(("
0 0 14 3 4 #"sum?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-sum"
0 0 26 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 26 3 2 #" ("
0 0 14 3 6 #"addend"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 0 26 3 4 #"   ("
0 0 14 3 5 #"deriv"
0 0 26 3 2 #" ("
0 0 14 3 6 #"augend"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"var"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #"(("
0 0 14 3 8 #"product?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-sum"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"make-product"
0 0 26 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 0 26 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 26 3 2 #" ("
0 0 14 3 12 #"multiplicand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"var"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"make-product"
0 0 26 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 26 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 0 26 3 1 #"("
0 0 14 3 12 #"multiplicand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #"(("
0 0 14 3 15 #"exponentiation?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 26 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 0 26 3 8 #"       ("
0 0 14 3 12 #"make-product"
0 0 26 3 2 #" ("
0 0 14 3 19 #"make-exponentiation"
0 0 26 3 2 #" ("
0 0 14 3 4 #"base"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 0 26 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 1 26 65 1 #"\t"
0 0 26 3 6 #"     ("
0 0 14 3 5 #"deriv"
0 0 26 3 2 #" ("
0 0 14 3 4 #"base"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"var"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 1 #"("
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #" ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 7 #"unknown"
0 0 20 3 1 #" "
0 0 20 3 10 #"expression"
0 0 20 3 1 #" "
0 0 20 3 4 #"type"
0 0 20 3 1 #" "
0 0 20 3 2 #"--"
0 0 20 3 6 #" DERIV"
0 0 20 3 1 #"\""
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 18 3 41 #";; Don't remove the equation definitions."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"equation1"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"make-product"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"x"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"                "
0 0 23 3 1 #"'"
0 0 14 3 1 #"y"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 8 #"make-sum"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 4 #"))) "
0 0 18 3 25 #"; i.e., ((x^2)y + 3xy) dx"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"equation2"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"make-sum"
0 0 26 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 2 #" ("
0 0 14 3 19 #"make-exponentiation"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 12 #"make-product"
0 0 26 3 1 #" "
0 0 23 3 1 #"7"
0 0 26 3 2 #" ("
0 0 14 3 19 #"make-exponentiation"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 12 #"make-product"
0 0 26 3 1 #" "
0 0 23 3 2 #"-3"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"            "
0 0 23 3 2 #"12"
0 0 26 3 3 #")) "
0 0 18 3 24 #";; 5x^3 + 7x^2 - 3x + 12"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 33 #";;; differentiation for exponents"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"make-exponentiation"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 2 #"(("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 1 #"("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"**"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"exponentiation?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 2 #"**"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"base"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 34 #";;; deriv including exponentiation"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";(define (make-sum a1 . augend) ;augend is the list (after dot)"
0 0 26 29 1 #"\n"
0 0 18 3 1 #";"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";  (define (length elements)"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";    (if (null? elements) 0"
0 0 26 29 1 #"\n"
0 0 18 3 40 #";        (+ 1 (length (cdr elements)))))"
0 0 26 29 1 #"\n"
0 0 18 3 8 #";  (cond"
0 0 26 29 1 #"\n"
0 0 18 3 44 #";    [(null? augend) a1] ;if null, return a1"
0 0 26 29 1 #"\n"
0 0 18 3 90
(
 #";    [(and (= (length augend) 1) (number? (car augend)) (number? a1)"
 #") (+ a1 (car augend))]"
) 0 0 26 29 1 #"\n"
0 0 18 3 63
#";    [(and (= (length augend) 1) (=number? (car augend) 0)) a1]"
0 0 26 29 1 #"\n"
0 0 18 3 102
(
 #";    [(and (= (length augend) 1) (number? (car augend)) (not (= (car"
 #" augend) 0))) (list '+ a1 augend)]"
) 0 0 26 29 1 #"\n"
0 0 18 3 33 #";    [(and (> (length augend) 1) "
0 0 26 29 1 #"\n"
0 0 18 3 5 #";    "
0 0 26 29 1 #"\n"
0 0 18 3 61
#";    [(and (= (length augend) 1) (=number? (car augend))) a1]"
0 0 26 29 1 #"\n"
0 0 18 3 56 #";    [(and (number? a1) (number? augend)) (+ a1 augend)]"
0 0 26 29 1 #"\n"
0 0 18 3 41 #";    [(variable? a1) (list '+ a1 augend)]"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";    [else \""
0 0 18 3 9 #"invalid\"]"
0 0 26 29 1 #"\n"
0 0 18 3 11 #";         )"
0 0 26 29 1 #"\n"
0 0 18 3 4 #";  )"
0           0
